*partshell.txt*    Partshell: Vim Plugin for Shell Commands

==============================================================================
Introduction                                      *partshell-intro*
==============================================================================
Partshell is a Vim plugin that adds helper commands for working with shell
commands in Vim. For example, `:Shgrep` is an easy way to use any `grep`
program, the same way Vim's builtin `:grep` command works. For example,
`:Shgrep rg --vimgrep foo` will use `ripgrep`.

==============================================================================
Advantages                                       *partshell-advantages*
==============================================================================
A couple of general advantages of the Partshell approach:

1. *Flexibility*: For example, `:Shgrep pbpaste` on macOS parses `grep` output
   from the clipboard, which is harder with built-in options like `'grepprg'`.

2. *Repeatability*: Since commands are run directly from the command line, you
   can easily repeat or refine them using Vim's command line history.

==============================================================================
Notes                                            *partshell-notes*
==============================================================================
Adding a bang (`!`) mirrors the behavior of equivalent Vim built-in commands.
For example, `:Shgrep!` won't automatically jump to the first match, just like
`:grep!`.

==============================================================================
Commands                                         *partshell-commands*
==============================================================================
The following commands are provided by Partshell:

------------------------------------------------------------------------------
Shargs                                            *:Shargs*
------------------------------------------------------------------------------
`:Shargs[!]`

Populates the argument list with the result of a shell command. Each line is
interpreted as a file path. A bang (`!`) modifies behavior as expected.

Example:

    :Shargs fd partshell

Uses `fd` to populate the argument list with files matching "partshell".

Built-in alternative:

    :args `fd partshell`

Note: This doesn't handle filenames with spaces properly.

------------------------------------------------------------------------------
Shgrep                                            *:Shgrep*
------------------------------------------------------------------------------
`:Shgrep[!]`

Runs a shell command as a `grep` program, populating the quickfix list with
matching lines. With a bang (`!`), it won't jump to the first match.

Example:

    :Shgrep rg --vimgrep partshell

Uses `ripgrep` to populate the quickfix list with lines containing "partshell".

Built-in alternative:

    :set grepprg=rg\ --vimgrep | grep partshell

------------------------------------------------------------------------------
Shlgrep                                           *:Shlgrep*
------------------------------------------------------------------------------
`:Shlgrep[!]`

The same as `:Shgrep`, but populates the location list instead of the quickfix
list.

------------------------------------------------------------------------------
Shmake                                            *:Shmake*
------------------------------------------------------------------------------
`:Shmake[!]`

Runs a `make` program, populating the quickfix list with error lines. With a
bang (`!`), it won't jump to the first match.

Example:

    :Shmake clang %

Compiles the current file with `clang`.

Built-in alternative:

    :set makeprg=clang\ %

------------------------------------------------------------------------------
Shnew                                             *:Shnew*
------------------------------------------------------------------------------
`:Shnew[!]`

Creates a new buffer with the output of a shell command. The buffer is named
after the command. With a bang (`!`), the same buffer is reused for subsequent
runs.

Example:

    :Shnew git diff

Creates a new buffer named "git diff" with the output of the command.

Built-in alternative:

    :new | r !git diff

------------------------------------------------------------------------------
P Command                                         *:P*
------------------------------------------------------------------------------
`:P`

Applies a command to the visual selection, including partial lines. This works
like the range-based behavior of Vim commands, but also supports selections
with `v` or `<C-v>`.

Example:

Given a Markdown table:

    | Header 1     | Header 2     | Header 3     |
    |--------------|--------------|--------------|
    | Row 1 Cell 1 | Row 1 Cell 2 | Row 1 Cell 3 |
    | Row 2 Cell 1 | Row 2 Cell 2 | Row 2 Cell 3 |

Use blockwise `<C-v>` to select "Header 3" in rows 1-3, then:

    :P s/row/Row

This replaces "row" with "Row" in the selection.

Built-in alternative:

Copy the selection to a new buffer, run the command, copy the result, and paste
it back.

==============================================================================
vim:tw=78:ts=8:ft=help
